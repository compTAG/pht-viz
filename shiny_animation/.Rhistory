}
}
vert_x <- c(-.95, 0, 0, .95, -.59, .59)
vert_y <- c(.31, 1, 0, .31, -.81, -.81)
vert_lab <- c("v1", "v2", "v3", "v4", "v5", "v6")
verts <- data.frame(vert_x, vert_y, vert_lab, stringsAsFactors = F)
edges <- list(
make_edge("v1", "v3"),
make_edge("v2", "v3"),
make_edge("v4", "v3"),
make_edge("v5", "v3"),
make_edge("v6", "v3")
)
piseq <- seq(0, 2 * pi, length.out = 100)
createGIF <- function(i){
order_on_vec_list <- order_on_a_vector(verts = verts, theta = i)
order_vec <- order_on_vec_list$order
height_vec <- order_on_vec_list$height
layout(matrix(c(1,2, 2, 3, 4, 4, 5, 5), 2, 4, byrow = TRUE),
widths=c(1,1,1,1), heights=c(1,1))
plot(0, xaxt = 'n', yaxt = 'n', bty = 'n', pch = '', ylab = '', xlab = '')
plot_complex(verts, edges, xaxt = 'n', yaxt = 'n', pch = 20, cex = 1.8, lwd = 1.5, xlab = "", ylab = "")
for(j in 1:nrow(verts)){
p1 <- c(cos(i) * height_vec[order_vec == j], sin(i) * height_vec[order_vec == j])
p2 <- verts[j, 1:2]
p1x <- as.numeric(p1[1])
p1y <- as.numeric(p1[2])
p2x <- as.numeric(p2[1])
p2y <- as.numeric(p2[2])
m <- (p1y - p2y) / (p1x - p2x)
b <- - m * p2x + p2y
if ((b != Inf) && (m != Inf)) {
abline(a = b, b = m)
}
}
par(family = "sans")
plot(0, xaxt = 'n', yaxt = 'n', bty = 'n', pch = '', ylab = '', xlab = '')
par(family = "sans")
plot(NULL, xaxt = 'n', yaxt = 'n', xlim=c(-2,2), ylim=c(-2,2), ylab="", xlab="")
draw.circle(0, 0, 1)
arrows(0, 0,
x1 = cos(i), y1 = sin(i), length = 0.25, angle = 30,
code = 2, col = par("fg"), lty = par("lty"),
lwd = 4
)
par(family = "sans")
#plot(NULL, xlim=c(-350,350), ylim=c(-350,350), ylab="Death", xlab="Birth", family = "sans")
plot(NULL, xlim=c(-1,1), ylim=c(-1,1), ylab="", xlab="", cex.axis=2.5)
#plot_diagram(verts, i, cex = 3.5)
}
saveGIF(
{
for (i in 2:length(piseq)) {
createGIF(piseq[i])
trailers <- 8
for (j in 1:trailers){
if(i-j >0){
color <- rgb(.5,.5,.5, alpha=1-(.1*j))
plot_diagram(verts, piseq[i-j], col=color, cex=3.5)
}
}
plot_diagram(verts, piseq[i], cex = 3.5)
}
},
movie.name = "animation.gif",
img.name = "Rplot",
convert = "magick",
cmd.fun,
clean = TRUE,
interval = 0.1,
ani.width = 960,
ani.height = 960
)
createGIF <- function(i){
order_on_vec_list <- order_on_a_vector(verts = verts, theta = i)
order_vec <- order_on_vec_list$order
height_vec <- order_on_vec_list$height
layout(matrix(c(1,2, 2, 3, 4, 4, 5, 5), 2, 4, byrow = TRUE),
widths=c(1,1,1,1), heights=c(1,1))
plot(0, xaxt = 'n', yaxt = 'n', bty = 'n', pch = '', ylab = '', xlab = '')
plot_complex(verts, edges, xaxt = 'n', yaxt = 'n', pch = 20, cex = 1.8, lwd = 1.5, xlab = "", ylab = "")
for(j in 1:nrow(verts)){
p1 <- c(cos(i) * height_vec[order_vec == j], sin(i) * height_vec[order_vec == j])
p2 <- verts[j, 1:2]
p1x <- as.numeric(p1[1])
p1y <- as.numeric(p1[2])
p2x <- as.numeric(p2[1])
p2y <- as.numeric(p2[2])
m <- (p1y - p2y) / (p1x - p2x)
b <- - m * p2x + p2y
abline(a = b, b = m)
}
par(family = "sans")
plot(0, xaxt = 'n', yaxt = 'n', bty = 'n', pch = '', ylab = '', xlab = '')
par(family = "sans")
plot(NULL, xaxt = 'n', yaxt = 'n', xlim=c(-2,2), ylim=c(-2,2), ylab="", xlab="")
draw.circle(0, 0, 1)
arrows(0, 0,
x1 = cos(i), y1 = sin(i), length = 0.25, angle = 30,
code = 2, col = par("fg"), lty = par("lty"),
lwd = 4
)
par(family = "sans")
#plot(NULL, xlim=c(-350,350), ylim=c(-350,350), ylab="Death", xlab="Birth", family = "sans")
plot(NULL, xlim=c(-1,1), ylim=c(-1,1), ylab="", xlab="", cex.axis=2.5)
#plot_diagram(verts, i, cex = 3.5)
}
saveGIF(
{
for (i in 2:length(piseq)) {
createGIF(piseq[i])
trailers <- 8
for (j in 1:trailers){
if(i-j >0){
color <- rgb(.5,.5,.5, alpha=1-(.1*j))
plot_diagram(verts, piseq[i-j], col=color, cex=3.5)
}
}
plot_diagram(verts, piseq[i], cex = 3.5)
}
},
movie.name = "animation.gif",
img.name = "Rplot",
convert = "magick",
cmd.fun,
clean = TRUE,
interval = 0.1,
ani.width = 960,
ani.height = 960
)
createGIF <- function(i){
order_on_vec_list <- order_on_a_vector(verts = verts, theta = i)
order_vec <- order_on_vec_list$order
height_vec <- order_on_vec_list$height
layout(matrix(c(1,2, 2, 3, 4, 4, 5, 5), 2, 4, byrow = TRUE),
widths=c(1,1,1,1), heights=c(1,1))
plot(0, xaxt = 'n', yaxt = 'n', bty = 'n', pch = '', ylab = '', xlab = '')
plot_complex(verts, edges, xaxt = 'n', yaxt = 'n', pch = 20, cex = 1.8, lwd = 1.5, xlab = "", ylab = "")
for(j in 1:nrow(verts)){
p1 <- c(cos(i) * height_vec[order_vec == j], sin(i) * height_vec[order_vec == j])
p2 <- verts[j, 1:2]
p1x <- as.numeric(p1[1])
p1y <- as.numeric(p1[2])
p2x <- as.numeric(p2[1])
p2y <- as.numeric(p2[2])
m <- (p1y - p2y) / (p1x - p2x)
b <- - m * p2x + p2y
if (!is.na(b) && (!is.na(m))){
if ((b != Inf) && (m != Inf)) {
abline(a = b, b = m)
}
}
}
par(family = "sans")
plot(0, xaxt = 'n', yaxt = 'n', bty = 'n', pch = '', ylab = '', xlab = '')
par(family = "sans")
plot(NULL, xaxt = 'n', yaxt = 'n', xlim=c(-2,2), ylim=c(-2,2), ylab="", xlab="")
draw.circle(0, 0, 1)
arrows(0, 0,
x1 = cos(i), y1 = sin(i), length = 0.25, angle = 30,
code = 2, col = par("fg"), lty = par("lty"),
lwd = 4
)
par(family = "sans")
#plot(NULL, xlim=c(-350,350), ylim=c(-350,350), ylab="Death", xlab="Birth", family = "sans")
plot(NULL, xlim=c(-1,1), ylim=c(-1,1), ylab="", xlab="", cex.axis=2.5)
#plot_diagram(verts, i, cex = 3.5)
}
saveGIF(
{
for (i in 2:length(piseq)) {
createGIF(piseq[i])
trailers <- 8
for (j in 1:trailers){
if(i-j >0){
color <- rgb(.5,.5,.5, alpha=1-(.1*j))
plot_diagram(verts, piseq[i-j], col=color, cex=3.5)
}
}
plot_diagram(verts, piseq[i], cex = 3.5)
}
},
movie.name = "animation.gif",
img.name = "Rplot",
convert = "magick",
cmd.fun,
clean = TRUE,
interval = 0.1,
ani.width = 960,
ani.height = 960
)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
install.packages("rgl")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
exit
stop
stop
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
par("mar")
par(mar=c(1,1,1,1))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages('rgl')
install.packages("rgl")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
